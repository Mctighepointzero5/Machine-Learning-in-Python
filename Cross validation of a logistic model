#import packages.
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc, confusion_matrix, precision_score, recall_score
from sklearn.linear_model import LogisticRegression
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline
import numpy as np

#read cvs.
cancer = pd.read_csv('/content/cancer.csv')
cancer.head()

#Dummy code.
cancer.loc[cancer['diagnosis'] == 'M', 'cancer_present'] = 1
cancer.loc[cancer['diagnosis'] == 'B', 'cancer_present'] = 0

#Split into X and Y.
X = cancer[['perimeter_mean','radius_mean','texture_mean','area_mean','smoothness_mean','compactness_mean','concavity_mean','concave points_mean','symmetry_mean','fractal_dimension_mean']]
y = cancer['cancer_present']

#split 25 percent of dataa into test and train.
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size =0.25,random_state = 42)

#Build a pipeline that imputes and standardizes, scales, and runs a regression. 
pipe = Pipeline([
('imp_mean', SimpleImputer(missing_values=np.nan, strategy='mean')),
('scaler', StandardScaler()),
('log_reg',LogisticRegression(random_state=0))])

#Fit the model on the training data.
pipe.fit(X_train, y_train)

#evaluate pipeline using 5 fold cross validation.
from sklearn.model_selection import cross_val_score
scores = cross_val_score(pipe, X_train, y_train, cv=5)
print(scores.mean())
print(scores.std())

#fit model to test set.
test_accuracy = pipe.score(X_test, y_test)
print('The testing accuracy is', test_accuracy)
