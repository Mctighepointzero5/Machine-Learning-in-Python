#import packages.
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc, confusion_matrix, precision_score, recall_score
from sklearn.linear_model import LogisticRegression
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline
import numpy as np

#read CSV.
cancer = pd.read_csv('/content/cancer.csv')
cancer.head()

#dummy code outcome variable.
cancer.loc[cancer['diagnosis'] == 'M', 'cancer_present'] = 1
cancer.loc[cancer['diagnosis'] == 'B', 'cancer_present'] = 0

#Split data into predictors and criterion
X = cancer[['perimeter_mean','radius_mean','texture_mean','area_mean','smoothness_mean','compactness_mean','concavity_mean','concave points_mean','symmetry_mean','fractal_dimension_mean']]
y = cancer['cancer_present']

#train test split.
X_train_val,X_test,y_train_val,y_test = train_test_split(X,y,test_size =0.25,random_state = 42)
X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val,test_size = 0.3333,random_state = 42)

#Creatie a pipeline that will impupte data and fit it to a logistic regression.
pipe_std = Pipeline([
('imp_mean', SimpleImputer(missing_values=np.nan, strategy='mean')),
('scaler', StandardScaler()),
('log_reg',LogisticRegression(random_state=0))])

#fit pipeline to training data and get accuracy.
pipe_std.fit(X_train, y_train)
train_accuracy_std = pipe_std.score(X_train, y_train)
print(train_accuracy_std)

#Get accuracy of model on validation data. 
val_accuracy_std = pipe_std.score(X_val, y_val)
print('The validation accuracy is', val_accuracy_std)

#create a pipeline that will impute and normalize data and fit it into a logistic model.
pipe_norm = Pipeline([('imp_mean',SimpleImputer(missing_values=np.nan, strategy='mean')),
                      ('norm', MinMaxScaler()), 
                      ('log_reg', LogisticRegression(random_state=0))])

#fit the nomal pipeline to the training data and validation data.
pipe_norm.fit(X_train, y_train)
train_accuracy_norm = pipe_norm.score(X_train, y_train)
val_accuracy_norm = pipe_norm.score(X_val, y_val)
print('The normalized data training accuracy is', train_accuracy_norm)
print('The normalized data validation accuracy is', val_accuracy_norm)

#Fit standard model to test data.
test_accuracy_std = pipe_std.score(X_test, y_test)
print('The testing accuracy is', test_accuracy_std)
